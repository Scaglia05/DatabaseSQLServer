// <auto-generated />
using System;
using ImoveisApi.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ImoveisApi.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20241030002120_Imoveis")]
    partial class Imoveis
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ImoveisApi.Models.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("DataNascimento")
                        .HasColumnType("date");

                    b.Property<string>("Email_Cliente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cliente");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CPF = "123.456.789.10",
                            DataNascimento = new DateOnly(2002, 10, 10),
                            Email_Cliente = "cliente@gmail.com",
                            Endereco = "Av.12a, Araras-SP",
                            Nome = "Guilherme"
                        },
                        new
                        {
                            Id = 2,
                            CPF = "423.391.035-68",
                            DataNascimento = new DateOnly(2008, 3, 1),
                            Email_Cliente = "Marli42@gmail.com",
                            Endereco = "347 Carvalho Rua, Taubaté, Guiné",
                            Nome = "João Lucas Pereira"
                        });
                });

            modelBuilder.Entity("ImoveisApi.Models.Contrato", b =>
                {
                    b.Property<int>("Id_Contrato")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Contrato"));

                    b.Property<int>("Cliente")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Data_Fim")
                        .HasColumnType("date");

                    b.Property<DateOnly>("Data_Inicio")
                        .HasColumnType("date");

                    b.Property<int>("Imovel")
                        .HasColumnType("int");

                    b.HasKey("Id_Contrato");

                    b.HasIndex("Cliente");

                    b.HasIndex("Imovel");

                    b.ToTable("Contrato");
                });

            modelBuilder.Entity("ImoveisApi.Models.Imovel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AreaTotal_Imovel")
                        .HasPrecision(10, 3)
                        .HasColumnType("decimal(10,3)");

                    b.Property<string>("Endereco_Imovel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Proprietario")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Proprietario");

                    b.ToTable("Imovel");
                });

            modelBuilder.Entity("ImoveisApi.Models.Pagamento", b =>
                {
                    b.Property<int>("Id_Pagamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Pagamento"));

                    b.Property<int>("Contrato")
                        .HasColumnType("int");

                    b.Property<DateTime>("Data_Pagamento")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Valor_Pagamento")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id_Pagamento");

                    b.HasIndex("Contrato");

                    b.ToTable("Pagamento");
                });

            modelBuilder.Entity("ImoveisApi.Models.Proprietario", b =>
                {
                    b.Property<int>("Id_Proprietario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Proprietario"));

                    b.Property<string>("CPF_Proprietario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome_Proprietario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone_Proprietario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Proprietario");

                    b.ToTable("Proprietario");
                });

            modelBuilder.Entity("ImoveisApi.Models.Vendedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CRECI_Vendedor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Email_Vendedor")
                        .HasColumnType("int");

                    b.Property<string>("Nome_Vendedor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Telefone_Vendedor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Vendedor");
                });

            modelBuilder.Entity("ImoveisApi.Models.VendedorImovel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Imovel")
                        .HasColumnType("int");

                    b.Property<int>("Vendedor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Imovel");

                    b.HasIndex("Vendedor");

                    b.ToTable("VendedorImovel");
                });

            modelBuilder.Entity("ImoveisApi.Models.Contrato", b =>
                {
                    b.HasOne("ImoveisApi.Models.Cliente", "Id_Cliente")
                        .WithMany()
                        .HasForeignKey("Cliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImoveisApi.Models.Imovel", "Id_Imovel")
                        .WithMany()
                        .HasForeignKey("Imovel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Id_Cliente");

                    b.Navigation("Id_Imovel");
                });

            modelBuilder.Entity("ImoveisApi.Models.Imovel", b =>
                {
                    b.HasOne("ImoveisApi.Models.Proprietario", "Id_Proprietario")
                        .WithMany()
                        .HasForeignKey("Proprietario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Id_Proprietario");
                });

            modelBuilder.Entity("ImoveisApi.Models.Pagamento", b =>
                {
                    b.HasOne("ImoveisApi.Models.Contrato", "Id_Contrato")
                        .WithMany()
                        .HasForeignKey("Contrato")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Id_Contrato");
                });

            modelBuilder.Entity("ImoveisApi.Models.VendedorImovel", b =>
                {
                    b.HasOne("ImoveisApi.Models.Imovel", "Imovel_Id")
                        .WithMany()
                        .HasForeignKey("Imovel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImoveisApi.Models.Vendedor", "Vendedor_Id")
                        .WithMany()
                        .HasForeignKey("Vendedor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Imovel_Id");

                    b.Navigation("Vendedor_Id");
                });
#pragma warning restore 612, 618
        }
    }
}
